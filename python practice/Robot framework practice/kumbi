1.what is robot frame work?
A framework is a collection of functions that can be used to achieve Particular task

2.advantages of robot frame work?
1.	Robot Framework is a Python based keyword-driven test automation framework
2.	Robot Framework is an open source and platform independent framework
3.	By default, Robot Framework creates reports.
4.	Provides ability to create reusable higher-level keywords from the existing keywords.
5.	Provides test-case and test-suite -level setup and teardown.

3.disadvantages of robotframework?
1.Limited programming capabilities: While Robot Framework is known for its user-friendly syntax, it can't compete with more complex frameworks in terms of programming features. This can be limiting for intricate test cases.

2.Challenges with complex scenarios:  For basic tests, Robot excels. But as your testing needs get more complex, you might need to create custom libraries or keywords. This can require additional skills and knowledge.

3.No built-in IDE: There's no official IDE for Robot Framework, so you'll likely rely on third-party tools or text editors for development and debugging.

4.Limited non-UI testing: Robot Framework is primarily focused on UI testing. While it can handle some API testing, it has weaker support for other areas like database testing.

5.Steeper learning curve for advanced use:  While the basics are easy to grasp, extending Robot Framework's functionalities or using it for complex scenarios requires more in-depth knowledge.

6.Python dependency:  Robot Framework works with Python. If you want to extend its capabilities beyond built-in keywords, you'll need some Python knowledge.

7.Limited test report customization: The HTML reports generated by Robot Framework can be difficult to customize to your specific needs.

8.Lack of parallel testing: Robot Framework doesn't support parallel test execution, which can be a time-saver for running tests across multiple browsers or platforms.

9.Debugging difficulties: Some errors encountered in Robot Framework can be tricky to debug.


4.what is test setup and test teardown?
Test Setup:

Purpose: Prepares the testing environment for a specific test case.
Activities: This might involve initializing objects, creating test data, setting up database connections, opening web browsers for UI testing, or any other actions needed for the test to run in a known and controlled state.
Benefits:
Isolation: Each test starts with a clean slate, reducing the risk of one test affecting another due to leftover data or configurations.
Reusability: Common setup steps can be consolidated into reusable functions, saving time and effort.
Maintainability: Makes test code more readable and easier to understand by separating setup logic from the actual test assertions.

Test Teardown:

Purpose: Cleans up the testing environment after a test case finishes execution.
Activities: This could involve closing database connections, deleting temporary files, quitting web browsers, or releasing any resources acquired during the test.
Benefits:
Resource Management: Ensures efficient use of resources and prevents leaks that might impact subsequent tests.
Test Independence: Guarantees tests are independent and don't rely on side effects from previous tests.
Reliability: Helps maintain a clean testing environment for consistent test results.

5.robotframe work inbuilt libraries?

Robot Framework comes with a set of built-in libraries that provide various functionalities for writing test cases. These libraries are readily available without needing separate installation. Here's a breakdown of some key built-in libraries:

BuiltIn: This is the most essential library,  automatically imported and always available. It offers generic keywords for common tasks like:

Verifications (e.g., Should Be Equal, Should Contain)
Conversions (e.g., Convert To Integer)
Logging (e.g., Log, Log To Console)
Control flow (e.g., Run Keyword If, Wait Until Keyword Succeeds)
Variable manipulation (e.g., Set Global Variable)
Collections: This library provides keywords for working with collections like lists and dictionaries. You can use it for tasks like creating, merging, and iterating through collections.

Dialogs: This library allows interacting with the user during test execution. You can use it to:

Pause test execution (e.g., Pause Test)
Prompt the user for input (e.g., Get Password)
Display messages (e.g., Message Dialog)
OperatingSystem: This library offers keywords for interacting with the operating system, including:

File and directory operations (e.g., Create File, Remove Directory)
Running external commands (e.g., Execute Command)
Environment variable manipulation (e.g., Get Environment Variable)
Process: This library facilitates executing system processes and capturing their output. You can use it to launch applications, wait for them to finish, and retrieve results.

Remote: While it doesn't have its own keywords, this library acts as a base for creating remote testing libraries that allow running tests on different machines.

String: This library provides keywords for manipulating strings, including:

Splitting, searching, and replacing text
Case conversion
Pattern matching
Telnet: This library enables interacting with Telnet servers for testing network devices or command-line applications.

XML: This library provides keywords for parsing and manipulating XML data. You can use it to validate XML structures and extract specific information.

These are just some of the core built-in libraries offered by Robot Framework. Remember, you can always leverage external libraries for functionalities beyond what built-in ones provide

6.shallow copy and deep copy?
Shallow Copy

Creates a new object that holds copies of the primitive values (like numbers, strings) from the original object.
If the original object contains references to other objects (like lists, dictionaries, custom classes in some languages), the shallow copy only copies those references, not the actual contents of the referenced objects.
Changes made to the copied references in one object will affect the other object as well, since they both point to the same underlying data.

Deep Copy

Creates a completely independent copy of the original object, including all its primitive values and nested objects.
Recursively copies all levels of nested objects, ensuring that any modifications made to one object don't affect the other.
This is typically more expensive in terms of memory and processing time compared to shallow copy

